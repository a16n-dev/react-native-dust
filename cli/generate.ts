import { loadConfig } from './loadConfig';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { resolve, dirname } from 'path';

export async function generate(configPath?: string): Promise<void> {
  const config = loadConfig(configPath);
  
  console.log('Config loaded successfully:');
  console.log(JSON.stringify(config, null, 2));
  
  // Find package root by looking for package.json
  function findPackageRoot(startDir: string): string {
    let currentDir = startDir;
    while (currentDir !== dirname(currentDir)) {
      if (existsSync(resolve(currentDir, 'package.json'))) {
        return currentDir;
      }
      currentDir = dirname(currentDir);
    }
    throw new Error('Could not find package.json');
  }
  
  const packageRoot = findPackageRoot(__dirname);
  const uiDir = resolve(packageRoot, 'ui');
  
  console.log('Package root:', packageRoot);
  console.log('UI directory:', uiDir);
  
  mkdirSync(uiDir, { recursive: true });
  
  // Generate basic index.js file
  const indexContent = `// Generated by Duck CLI
// This file is auto-generated - do not edit manually

export const theme = ${JSON.stringify(config.theme, null, 2)};

// Add your generated UI components here
export default {
  theme
};
`;
  
  // Generate TypeScript declaration file
  const dtsContent = `// Generated by Duck CLI
// This file is auto-generated - do not edit manually

import { DuckTheme } from '../types';

export declare const theme: DuckTheme;

declare const _default: {
  theme: DuckTheme;
};

export default _default;
`;

  const indexPath = resolve(uiDir, 'index.js');
  const dtsPath = resolve(uiDir, 'index.d.ts');
  
  writeFileSync(indexPath, indexContent);
  writeFileSync(dtsPath, dtsContent);
  
  console.log(`Generated UI files in ${uiDir}`);
  console.log(`- index.js`);
  console.log(`- index.d.ts`);
}